version: '3.9'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
    environment:
      - NEXT_PUBLIC_API_URL=https://api.yourdomain.com
    restart: unless-stopped
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "443:443"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:prod_password@db:5432/nutrition_prod
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-production-jwt-secret-here
      - CORS_ORIGIN=https://yourdomain.com
    restart: unless-stopped
    depends_on:
      - db
      - redis
    volumes:
      - ./backend/ssl:/app/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=prod_password
      - POSTGRES_DB=nutrition_prod
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5432:5432"  # Remove in production, only for maintenance

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass prod_redis_password
    volumes:
      - redis_data_prod:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  backup:
    image: postgres:15
    volumes:
      - pgdata_prod:/var/lib/postgresql/data:ro
      - ./backups:/backups
    command: >
      bash -c "
        while true; do
          pg_dump -U postgres -h db nutrition_prod > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
          sleep 86400
        done
      "
    environment:
      - PGPASSWORD=prod_password
    restart: unless-stopped

volumes:
  pgdata_prod:
  redis_data_prod:
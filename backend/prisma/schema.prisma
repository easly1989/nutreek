// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String?
  memberships  Membership[]
  ingredientQuantities UserIngredientQuantity[]
  substitutions Substitution[]
  activities   Activity[]
  comments     Comment[]
  auditLogs    AuditLog[]
  complianceRecords ComplianceRecord[]
  dataExports  DataExport[]
  securityEvents SecurityEvent[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Tenant {
  id          String        @id @default(cuid())
  name        String
  memberships Membership[]
  weeklyPlans WeeklyPlan[]
  shoppingLists ShoppingList[]
  activities  Activity[]
  auditLogs   AuditLog[]
  dataExports DataExport[]
  securityEvents SecurityEvent[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  isSystem    Boolean      @default(false)
  permissions Permission[]

  memberships Membership[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  resource    String   // e.g., "recipe", "meal", "user"
  action      String   // e.g., "create", "read", "update", "delete"
  description String?

  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([resource, action])
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  tenantId  String
  roleId    String?

  user      User     @relation(fields: [userId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  role      Role?    @relation(fields: [roleId], references: [id])

  @@unique([userId, tenantId])
}

model WeeklyPlan {
  id        String   @id @default(cuid())
  tenantId  String
  startDate DateTime

  tenant       Tenant        @relation(fields: [tenantId], references: [id])
  days         Day[]
  shoppingList ShoppingList?
}

model Day {
  id          String   @id @default(cuid())
  date        DateTime
  weeklyPlanId String

  weeklyPlan  WeeklyPlan @relation(fields: [weeklyPlanId], references: [id])
  meals       Meal[]
}

model Meal {
  id      String   @id @default(cuid())
  type    String   // Breakfast, Snack, Lunch, Dinner
  dayId   String

  day     Day      @relation(fields: [dayId], references: [id])
  recipes Recipe[]
}

model Recipe {
  id        String       @id @default(cuid())
  name      String
  mealId    String
  macros    Json?        // kcal, protein, carbs, fat
  source    String?      // "fatsecret", "usda", "custom"
  externalId String?     // id from API

  meal      Meal         @relation(fields: [mealId], references: [id])
  ingredients Ingredient[]
}

model Ingredient {
  id        String       @id @default(cuid())
  name      String
  unit      String       // g, ml, piece
  amount    Float        // base quantity for recipe
  recipeId  String

  recipe    Recipe       @relation(fields: [recipeId], references: [id])
  userQuantities UserIngredientQuantity[]
}

model UserIngredientQuantity {
  id           String   @id @default(cuid())
  userId       String
  ingredientId String
  quantity     Float

  user         User       @relation(fields: [userId], references: [id])
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@unique([userId, ingredientId])
}

model Substitution {
  id         String   @id @default(cuid())
  userId     String
  originalId String
  substituteId String

  user       User     @relation(fields: [userId], references: [id])
}

model ShoppingList {
  id            String   @id @default(cuid())
  tenantId      String
  weeklyPlanId  String   @unique
  items         Json     // Array of ShoppingListItem
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant       Tenant        @relation(fields: [tenantId], references: [id])
  weeklyPlan   WeeklyPlan    @relation(fields: [weeklyPlanId], references: [id])
}

model Activity {
  id         String   @id @default(cuid())
  type       String
  title      String
  description String
  userId     String
  tenantId   String
  entityId   String?
  entityType String?
  metadata   Json?
  createdAt  DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  tenant Tenant @relation(fields: [tenantId], references: [id])
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  userId     String
  entityId   String
  entityType String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  tenantId    String?
  action      String   // CREATE, UPDATE, DELETE, READ, EXPORT, etc.
  resource    String   // user, recipe, meal, plan, etc.
  resourceId  String?
  details     Json?    // Additional details about the action
  ipAddress   String?
  userAgent   String?
  timestamp   DateTime @default(now())
  success     Boolean  @default(true)
  errorMessage String?

  user   User?   @relation(fields: [userId], references: [id])
  tenant Tenant? @relation(fields: [tenantId], references: [id])
}

model ComplianceRecord {
  id          String   @id @default(cuid())
  userId      String?
  type        String   // GDPR_REQUEST, DATA_EXPORT, CONSENT_UPDATE, etc.
  status      String   // PENDING, IN_PROGRESS, COMPLETED, FAILED
  details     Json?
  requestedAt DateTime @default(now())
  completedAt DateTime?
  expiresAt   DateTime?

  user User? @relation(fields: [userId], references: [id])
}

model DataExport {
  id          String   @id @default(cuid())
  userId      String
  tenantId    String?
  type        String   // FULL_EXPORT, PARTIAL_EXPORT, COMPLIANCE_EXPORT
  status      String   // REQUESTED, PROCESSING, COMPLETED, FAILED
  fileUrl     String?
  expiresAt   DateTime?
  requestedAt DateTime @default(now())
  completedAt DateTime?

  user   User?   @relation(fields: [userId], references: [id])
  tenant Tenant? @relation(fields: [tenantId], references: [id])
}

model SecurityEvent {
  id         String   @id @default(cuid())
  type       String   // FAILED_LOGIN, SUSPICIOUS_ACTIVITY, RATE_LIMIT_EXCEEDED, etc.
  severity   String   // LOW, MEDIUM, HIGH, CRITICAL
  userId     String?
  tenantId   String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  resolved   Boolean  @default(false)

  user   User?   @relation(fields: [userId], references: [id])
  tenant Tenant? @relation(fields: [tenantId], references: [id])
}